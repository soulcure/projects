package com.mykj.andr.pay;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import android.content.Context;
import android.content.DialogInterface.OnKeyListener;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.mykj.andr.model.FastBuyModel;
import com.mykj.andr.model.GoodsItem;
import com.mykj.andr.model.HallDataManager;
import com.mykj.andr.model.PayWay;
import com.mykj.andr.model.PromotionGoodsItem;
import com.mykj.andr.model.SubScript;
import com.mykj.andr.model.UserInfo;
import com.mykj.andr.provider.AddGiftProvider;
import com.mykj.andr.provider.GoodsItemProvider;
import com.mykj.andr.provider.PayWayProvider;
import com.mykj.andr.provider.PromotionGoodsProvider;
import com.mykj.andr.ui.CustomDialog;
import com.mykj.andr.ui.GoodsPromotionDialog;
import com.mykj.andr.ui.SelectPayDialog;
import com.mykj.andr.ui.ServerDialog;
import com.mykj.andr.ui.SinglePayDialog;
import com.mykj.andr.ui.fragment.CardZoneFragment;
import com.mykj.andr.ui.widget.HallAssociatedWidget;
import com.mykj.game.FiexedViewHelper;
import com.mykj.game.ddz.R;
import com.mykj.game.ddz.api.AnalyticsUtils;
import com.mykj.game.utils.AppConfig;
import com.mykj.game.utils.MobileHttpApiMgr;
import com.mykj.game.utils.Util;
import com.mykj.game.utils.UtilHelper;

public class PayUtils {

	/**
	 * 购买数量限制
	 * 
	 * @param statusBit
	 * @param isCmnetBuyLimited
	 * @return
	 */
	public static int getCmnetBuyLimitedCount(int statusBit,
			boolean isCmnetBuyLimited) {

		int limited = 0;

		limited = statusBit >> 8;

		if (limited == 0 && isCmnetBuyLimited) {
			limited = 5;
		}
		return limited;

	}

	/**
	 * 购买次数限制
	 * 
	 * @param statusBit
	 * @return
	 */
	public static int getBuyLimitTime(int statusBit) {
		int limited;
		limited = statusBit >> 16;
		if (limited == 0) {
			limited = 60;
		}
		return limited;
	}

	public static String getLocalIpAddress() {
		try {
			for (Enumeration<NetworkInterface> en = NetworkInterface
					.getNetworkInterfaces(); en.hasMoreElements();) {
				NetworkInterface intf = en.nextElement();
				for (Enumeration<InetAddress> enumIpAddr = intf
						.getInetAddresses(); enumIpAddr.hasMoreElements();) {
					InetAddress inetAddress = enumIpAddr.nextElement();
					if (!inetAddress.isLoopbackAddress()) {
						return inetAddress.getHostAddress().toString();
					}
				}
			}
		} catch (SocketException ex) {
			Log.e("WifiPreference IpAddress", ex.toString());
		}
		return null;
	}

	public static String getLocalMacAddress(Context mContext) {
		WifiManager wifi = (WifiManager) mContext
				.getSystemService(Context.WIFI_SERVICE);
		WifiInfo info = wifi.getConnectionInfo();
		return info.getMacAddress();
	}

	public static String getStringmacAddress(String mac)
			throws PatternSyntaxException {
		if (mac == null) {
			return "";
		}
		String regEx = "[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……& amp;*（）——+|{}【】‘；：”“’。，、？]";
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(mac);
		return m.replaceAll("").trim();
	}

	/**
	 * 4.5.2.19.签名信息获取:附加数据
	 * 
	 * @param operatorId
	 *            :运营商ID 1:移动 2:电信 3:联通
	 * @param platId
	 *            :平台ID 0：名游 2：百度 3：移动
	 * @return
	 */
	public static String getPayExternal(short operatorId, String macaddress,
			String imei, String versionName, boolean isNeedPver) {
		// 系统id:此处02为android平台
		String osId = "02";
		int playid = FiexedViewHelper.getInstance().getGameType();
		String ipaddress = getLocalIpAddress();
		UserInfo myuserInfo = HallDataManager.getInstance().getUserMe();
		String gameaccount = myuserInfo.userID + "";
		// 组成信息
		StringBuffer sb = new StringBuffer();
		sb.append("<p>");
		sb.append("<op>").append(operatorId).append("</op>");
		sb.append("<pid>").append(AppConfig.plat_id).append("</pid>");
		sb.append("<os>").append(osId).append("</os>");
		sb.append("<cid>").append(AppConfig.channelId).append("</cid>");
		sb.append("<scid>").append(AppConfig.childChannelId).append("</scid>");
		sb.append("<gid>").append(AppConfig.gameId).append("</gid>");
		sb.append("<playid>").append(playid).append("</playid>"); // 玩法选择
		if (isNeedPver) {
			sb.append("<pver>").append(AppConfig.pay_version).append("</pver>");
			sb.append("<plist>").append(PayManager.getPlistString())
					.append("</plist>");
			sb.append("<signtype>").append(PayManager.getSigntypeString())
					.append("</signtype>");
		}
		/** 联通校验专用 **/
		sb.append("<macaddress>").append(getStringmacAddress(macaddress))
				.append("</macaddress>");// MAC玛
		sb.append("<ipaddress>").append(ipaddress).append("</ipaddress>");// 网络IP
		sb.append("<gameaccount>").append(gameaccount).append("</gameaccount>");// 用户ID
		sb.append("<imei>").append(imei).append("</imei>"); // imei
		sb.append("<versionName>").append(versionName).append("</versionName>");// 版本号
		sb.append("</p>");
		return sb.toString();
	}

	/**
	 * 返回boolean类型的数组，支付入口，boolean[0]表示是否包含短信支付的入口,boolean[1]表示是否包含阿里支付的入口,
	 * boolean[2]表示微信入口
	 * 
	 * @param payWays
	 */
	public static boolean[] getPayEnters(Context mContext,
			ArrayList<PayWay> payWays) {
		int mobileCardType = UtilHelper.getMobileCardType(mContext);
		boolean isHasMessageType = false;
		boolean isHasWeixinType = false;
		boolean isHasAliBaodianType = false;
		for (int i = 0; i < payWays.size(); i++) {
			PayWay payWay = payWays.get(i);
			if (payWay.payType == 0 && mobileCardType != UtilHelper.UNKNOW_TYPE) {
				isHasMessageType = true;
			} else if (payWay.payType == 1) {
				isHasAliBaodianType = true;
			} else if (payWay.payType == 147) {
				isHasWeixinType = true;
			}
		}
//		if (isHasMessageType == false && isHasAliBaodianType == false
//				&& isHasWeixinType == false) {
//			if (mobileCardType == UtilHelper.UNKNOW_TYPE) {
//				isHasMessageType = false;
//				isHasWeixinType = true;
//				isHasAliBaodianType = true;
//			} else {
//				isHasMessageType = true;
//				isHasWeixinType = false;
//				isHasAliBaodianType = false;
//			}
//		}
		return new boolean[] { isHasMessageType, isHasAliBaodianType,
				isHasWeixinType };

	}

	/**
	 * 根据paySign判断是否是sdk的支付方式
	 * 
	 * @param mContext
	 * @param mPaySign
	 * @return
	 */
	public static boolean isSDKWithPaySign(int mPaySign) {
		if (mPaySign == PayManager.PAY_SIGN_MOBILE
				|| mPaySign == PayManager.PAY_SIGN_TELECOM
				|| mPaySign == PayManager.PAY_SIGN_UNICOM_SMS
				|| mPaySign == PayManager.PAY_SIGN_MOBILE_WAP) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 短信提示的弹出框，需求要求提示可控，按钮显示方式可控
	 * 
	 * @param mContext
	 * @param goodsItem
	 * @param promptTitle
	 */
	public static void showSMSPromptDialog(final Context mContext,
			GoodsItem goodsItem, OnClickListener payOnClickListener,
			OnClickListener cancelListener) {
		String telPhone = "400-777-9996";
		if (ServerDialog.SERVER_PHONE != null) {
			telPhone = ServerDialog.SERVER_PHONE;
		}
		String payPrompt = "尊敬的用户,点击确认即同意购买" + "%s" + "(赠"
				+ "%f" + ")\n" + "客服电话:" + telPhone + "\n" + "资费说明:信息费"
				+ "%d" + "元,需要发送1条短信," + "%d"
				+ "元/条(不含通信费),点击确认进行购买";
		SpannableString msp = getPaySpanPrompt(mContext, goodsItem, payPrompt);
		CustomDialog dialog = new CustomDialog(mContext, msp, false);
		dialog.show();
		dialog.setCancelCallBack(cancelListener);

		// SinglePayDialog mSinglePayDialog = new SinglePayDialog(mContext,
		// goodsItem, "消费提醒", payPrompt, 2);
		// mSinglePayDialog.show();
		// mSinglePayDialog.getPayConfirm().setOnClickListener(payOnClickListener);
		// mSinglePayDialog.setCancelCallBack(cancelListener);
	}

	public static int getDefaultPaySign(Context mContext) {
		int signType = 0;
		String mobileUserId = MobileHttpApiMgr.getInstance()
				.getOnlineGameUserId();
		if (Util.isCMWap(mContext) && !Util.isEmptyStr(mobileUserId)) {
			signType = PayManager.PAY_SIGN_MOBILE_WAP;
		}
		return signType;
	}

	/***
	 * @Title: showBuyDialog
	 * @Description: 普通弹出道具购买对话框，固定去登录送下发的快捷购买ID
	 * @param act
	 * @version: 2013-2-25 下午03:18:47
	 */
	public static void showBuyDialog(final Context context, int propid,
			boolean isConfirm, String title, final String message) {
		if (!PayWayProvider.getInstance(context).isPayWayREQFinish()) {
			PayWayProvider.getInstance(context).reqPayWayList();
		}
		// TODO 立刻成为会员
		final GoodsItem goodsItem = UtilHelper.getGoodsItem(propid);
		if (goodsItem == null) {
			if (AppConfig.debug) {
				UtilHelper.showCustomDialog(context, "快捷购买下发的商品不存在,请找网站配置快捷道具");
			}
			return;
		}
		// 是首充或者推广弹首充推广界面，如果不是走正常支付流程
		boolean isFirstCharge = false;
		if (PromotionGoodsProvider.getInstance().type == 0) {
			if (goodsItem != null && goodsItem.shopID != 0) {
				isFirstCharge = showPromotionDialog(context, goodsItem.shopID,
						title, null, null);
			}
		}
		if (!isFirstCharge) {
			PayManager.getInstance(context).requestFastBuyProp(goodsItem,
					title, message, isConfirm, null);
		}
	}

	/**
	 * 带破产送的快捷购买
	 * 
	 * @param context
	 * @param propid
	 * @param info
	 * @param cancelLis
	 */
	public static void showBuyDialog(final Context context, int propid,
			boolean isConfirm, String title, final String message,
			final OnClickListener cancelLis) {
		if (!PayWayProvider.getInstance(context).isPayWayREQFinish()) {
			PayWayProvider.getInstance(context).reqPayWayList();
		}
		// TODO 立刻成为会员
		final GoodsItem goodsItem = UtilHelper.getGoodsItem(propid);
		if (goodsItem == null) {
			if (AppConfig.debug) {
				UtilHelper.showCustomDialog(context, "快捷购买下发的商品不存在,请找网站配置快捷道具");
			}
			return;
		}
		// 是首充或者推广弹首充推广界面，如果不是走正常支付流程
		boolean isFirstCharge = false;
		if (PromotionGoodsProvider.getInstance().type == 0) {
			if (goodsItem != null && goodsItem.shopID != 0) {
				isFirstCharge = showPromotionDialog(context, goodsItem.shopID,
						title, cancelLis, null);
			}
		}
		if (!isFirstCharge) {
			PayManager.getInstance(context).requestFastBuyProp(goodsItem,
					title, message, isConfirm, cancelLis);
		}
	}

	/**
	 * @Title: showBuyDialog
	 * @Description: 弹出抽奖机的快捷购买，固定去登录送下发的快捷购买ID
	 * @version: 2013-2-25 下午03:18:47
	 */
	public static void showLotteryBuyDialog(final Context context,
			String title, int propid, final boolean isHide,
			final boolean isConfirm) {
		// TODO 立刻成为会员
		final GoodsItem goodsItem = UtilHelper.getGoodsItem(propid);
		// 是首充或者推广弹首充推广界面，如果不是走正常支付流程
		boolean isFirstCharge = false;
		OnClickListener cancel = new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// 关闭后调用破产赠送
				if (HallAssociatedWidget.getInstance() != null) {
					HallAssociatedWidget.getInstance().givingBankruptcy();
				}
			}
		};
		if (PromotionGoodsProvider.getInstance().type == 0) {
			if (goodsItem != null && goodsItem.shopID != 0) {
				isFirstCharge = showPromotionDialog(context, goodsItem.shopID,
						title, cancel, null);
			}
		}
		if (!isFirstCharge) {
			PayManager.getInstance(context).requestFastBuyProp(goodsItem,
					title, "", isConfirm, cancel);
		}
	}

	public static void setPayCorner(Context mContext, ImageView ivCorner,
			SubScript subScript) {
		PayWay payWay = subScript.payway;
		int signType = payWay.payType;
		byte subIcon = subScript.subIcon;
		int ritio = subScript.ritio;
		if (subIcon == 0 || (subIcon == 2 && ritio <= 0)) {
			ivCorner.setVisibility(View.GONE);
		} else if (subIcon == 1) {
			ivCorner.setVisibility(View.VISIBLE);
			ivCorner.setBackgroundResource(R.drawable.recommend_pay_corner);
		} else if (subIcon == 2) {
			Bitmap result = BitmapFactory.decodeResource(
					mContext.getResources(), R.drawable.add_give_pay_corner)
					.copy(Bitmap.Config.ARGB_8888, true);
			Canvas canvas = new Canvas(result);
			Paint mPaint = new Paint();
			mPaint.setTextSize(27);
			mPaint.setColor(Color.rgb(253, 255, 115));
			canvas.drawText(ritio + "%", result.getWidth() * 3 / 10,
					result.getHeight() * 3 / 4, mPaint);
			ivCorner.setVisibility(View.VISIBLE);
			Drawable bitmapDrawable = new BitmapDrawable(
					mContext.getResources(), result);
			ivCorner.setBackgroundDrawable(bitmapDrawable);
		}
	}

	/**
	 * 
	 * @param goodsItem
	 *            如果为null用推荐的默认商品弹出
	 * @param promptTitle
	 * @return 是否需要弹首充或者推广弹框
	 */
	public static boolean showPromotionDialog(final Context mContext,
			int shopID, final String promptTitle,
			final OnClickListener cancelClickListener,
			OnKeyListener backKeyListener) {
		if (shopID == 0) {
			return false;
		}
		final GoodsItem goodsItem = GoodsItemProvider.getInstance()
				.findGoodsItemById(shopID);
		// 判断下发数据的完整性
		PromotionGoodsProvider promotionGoddsProvider = PromotionGoodsProvider
				.getInstance();
		final AddGiftProvider addGiftProvider = AddGiftProvider.getInstance();
		if (promotionGoddsProvider.type == -1 || addGiftProvider.type == -1
				|| (promotionGoddsProvider.type != addGiftProvider.type)) {
			return false;
		}
		ArrayList<PromotionGoodsItem> promotionGoodsItems = promotionGoddsProvider.promotionGoods;
		if (promotionGoodsItems == null
				|| promotionGoodsItems.size() == 0
				|| (goodsItem != null && promotionGoddsProvider
						.getPromotionGoodItem(goodsItem.shopID) == null)) {
			return false;
		}
		// 显示首充或推广的弹框
		GoodsPromotionDialog goodsPromotionDialog = new GoodsPromotionDialog(
				mContext, promotionGoddsProvider.type, goodsItem, promptTitle);
		goodsPromotionDialog.show();
		if (cancelClickListener != null) {
			goodsPromotionDialog.setOnCancelListener(cancelClickListener);
		}
		if (backKeyListener != null) {
			goodsPromotionDialog.setOnBackKeyListener(backKeyListener);
		}
		goodsPromotionDialog.setOnPayListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				PayManager.getInstance(mContext).requestFastBuyProp(goodsItem,
						"", "", false, cancelClickListener);
			}
		});
		return true;
	}

	/**
	 * 显示单支付界面框
	 * 
	 * @param mContext
	 * @param goodsItem
	 * @param title
	 * @param prompt
	 * @param type
	 * @param cancelClickListener
	 */
	public static void showSinglePayDialog(final Context mContext,
			final GoodsItem goodsItem, final String title, final String prompt,
			final int type, final boolean isConfirm,
			final OnClickListener cancelClickListener) {
		SinglePayDialog mSinglePayDialog = new SinglePayDialog(mContext,
				goodsItem, title, prompt, type);
		if (cancelClickListener != null
				&& HallAssociatedWidget.getInstance().getQuickNode() != null) {
			mSinglePayDialog.setGoToGameCallBack(new OnClickListener() {

				@Override
				public void onClick(View arg0) {
					HallAssociatedWidget.getInstance().quickGame();
				}
			});
		}
		mSinglePayDialog.setSMSCallBack(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (type == PayManager.MARKET_BUY_TAG) {
					PayManager.getInstance(mContext).mSMSBuy(goodsItem, title,
							prompt, isConfirm, false, cancelClickListener);
				} else if (type == PayManager.FAST_BUY_TAG) {
					PayManager.getInstance(mContext).mSMSBuy(goodsItem, title,
							prompt, isConfirm, true, cancelClickListener);
				}
			}
		});
		mSinglePayDialog.setAlipayCallBack(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				PayManager.getInstance(mContext).payWithNoPlist(goodsItem,
						PayManager.PAY_SIGN_ALIPAY, title, prompt);
			}
		});
		mSinglePayDialog.setWXCallBack(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				PayManager.getInstance(mContext).payWithNoPlist(goodsItem,
						PayManager.PAY_SIGN_WX_SDK, title, prompt);
			}
		});
		if (cancelClickListener != null) {
			mSinglePayDialog.setCancelCallBack(cancelClickListener);
		} else {
			if (FastBuyModel.fastCancelPliston) {
				mSinglePayDialog.setCancelCallBack(new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						showMutilPayDialog(mContext, goodsItem, title, prompt,
								type, isConfirm, null);
					}
				});
			}
		}
		mSinglePayDialog.setCanceledOnTouchOutside(false);
		mSinglePayDialog.show();
	}

	public static void showMutilPayDialog(final Context mContext,
			final GoodsItem goodsItem, final String title, final String prompt,
			final int type, final boolean isConfirm,
			final OnClickListener cancelClickListener) {
		SelectPayDialog buyDialog = new SelectPayDialog(mContext, goodsItem,
				title, prompt);
		buyDialog.setAliPayBtnCallBack(new OnClickListener() {

			@Override
			public void onClick(View v) {
				PayManager.getInstance(mContext).payWithNoPlist(goodsItem,
						PayManager.PAY_SIGN_ALIPAY, title, prompt);
				// 点击商城确认 购买统计事件--支付宝
				AnalyticsUtils.onClickEvent(mContext, "017");
			}
		});
		buyDialog.setSMSPayBtnCallBack(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (type == PayManager.MARKET_BUY_TAG) {
					PayManager.getInstance(mContext).mSMSBuy(goodsItem, title,
							prompt, isConfirm, false, null);
				} else if (type == PayManager.FAST_BUY_TAG) {
					PayManager.getInstance(mContext).mSMSBuy(goodsItem, title,
							prompt, isConfirm, true, null);
				}
				// 点击商城确认 购买统计事件--短信
				AnalyticsUtils.onClickEvent(mContext, "017");
			}
		});
		buyDialog.setWXPayBtnCallBack(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				PayManager.getInstance(mContext).payWithNoPlist(goodsItem,
						PayManager.PAY_SIGN_WX_SDK, title, prompt);
			}
		});
		buyDialog.setCancelBtnCallBack(cancelClickListener);
		// 设置外面点击不关闭对话框
		buyDialog.setCanceledOnTouchOutside(false);
		buyDialog.show();
	}

	/**
	 * 返回推广类型，0为首充，1为推广，-1为无效
	 * 
	 * @return
	 */
	public static int getPromptionType() {
		if (PromotionGoodsProvider.getInstance().type == AddGiftProvider
				.getInstance().type
				&& PromotionGoodsProvider.getInstance().type != -1
				&& AddGiftProvider.getInstance().type != -1) {
			return PromotionGoodsProvider.getInstance().type;
		} else {
			return -1;
		}
	}

	/**
	 * 返回支付提示的span形式
	 * 
	 * @param mContext
	 * @param goodsItem
	 * @param payPrompt
	 * @return
	 */
	public static SpannableString getPaySpanPrompt(Context mContext,
			GoodsItem goodsItem, String payPrompt) {
		String goodsPrice = goodsItem.pointValue / 100 + "";
		String goodsDescrip = goodsItem.goodsDescrip;
		String goodsPresent = "赠"+goodsItem.goodsPresented;
		String payString = payPrompt.replace("%d", goodsPrice)
				.replace("%s", goodsDescrip)
				.replace("%f", goodsPresent);
		ArrayList<Integer> goodsPricePoss = new ArrayList<Integer>();
		ArrayList<Integer> goodsDescripPoss = new ArrayList<Integer>();
		ArrayList<Integer> goodsPresentPoss = new ArrayList<Integer>();
		int goodsPriceStart = 0;
		while(payString.indexOf(goodsPrice+"元", goodsPriceStart)!=-1){
			int goodsPricePosIndex = payString.indexOf(goodsPrice+"元", goodsPriceStart); 
			goodsPricePoss.add(goodsPricePosIndex);
			goodsPriceStart = goodsPricePosIndex+goodsPrice.length()+1;
		}
		int goodsDescripStart = 0;
		while(payString.indexOf(goodsDescrip, goodsDescripStart)!=-1){
			int goodsDescripPosIndex = payString.indexOf(goodsDescrip, goodsDescripStart); 
			goodsDescripPoss.add(goodsDescripPosIndex);
			goodsDescripStart = goodsDescripPosIndex+goodsDescrip.length();
		}
		int goodsPresentStart = 0;
		while(payString.indexOf(goodsPresent, goodsPresentStart)!=-1){
			int goodsPresentPosIndex = payString.indexOf(goodsPresent, goodsPresentStart); 
			goodsPresentPoss.add(goodsPresentPosIndex);
			goodsPresentStart = goodsPresentPosIndex+goodsDescrip.length();
		}
		SpannableString msp = new SpannableString(payString);
		int color = Color.rgb(33, 142, 0);
		for(int i:goodsPricePoss){
			msp.setSpan(new ForegroundColorSpan(color), i,
					i + goodsPrice.length() + 1,
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		}
		for(int i:goodsDescripPoss){
			msp.setSpan(new ForegroundColorSpan(color), i,
					i + goodsDescrip.length(),
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		}
		for(int i:goodsPresentPoss){
			msp.setSpan(new ForegroundColorSpan(color), i,
					i + goodsPresent.length(),
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		}
		return msp;
	}
}
